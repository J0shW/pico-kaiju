pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--this is a prototype to test spawning buildings
--and scrolling the map
--it should be noted that the map is not actually
--scrolling, but rather the player and buildings
--are moving relative to the map
--this prototype should spawn buildings as the player moves to new areas
--and despawn buildings as the player moves away from them (~100 tiles away)
function _init()
	init_player()

	--buildings array
	buildings={
		{spr=4,sx=-30,sy=-30},
		{spr=5,sx=30,sy=30},
	}
	--building variables
	despawn_distance=300
	
	--map functions
	map_x,map_y=0,0
end

function _update()
	--update player
	update_player()
	--update building
	update_buildings()
	--despawn buildings
	despawn_buildings()
	--spawn buildings
	spawn_buildings()
	--update map
	map_x+=p_dx*-1
	map_y+=p_dy*-1
end

function _draw()
	cls(3)
	--draw scrolling map
	for i=0,2 do
		for j=0,2 do
			map(0,0,
			map_x%128+128*i-128,
			map_y%128+128*j-128)
		end
	end
	draw_buildings()
	draw_player()
	--debug
	if (true) then
		print('p_sx '..p_sx, 10, 22)
		print('p_sy '..p_sy, 10, 28)
		-- print('map_x '..map_x, 10, 34)
		-- print('map_y '..map_y, 10, 40)
		print('#b '..#buildings, 10, 46)
		if (buildings[1] != nil) then
			print('b_dx '..buildings[1].spr, 10, 52)
			print('b_sx '..buildings[1].sx, 10, 58)
			print('b_sy '..buildings[1].sy, 10, 64)
			print('diff '..abs(buildings[1].sy-p_sy), 10, 70)
		end
	end
end

function init_player()
	--player variables

	--center of screen
	--this is where the player is drawn
	--this never changes
	p_x,p_y=60,60

	--player simulated x and y
	--this is where the player is in the world
	--this changes when the player moves
	p_sx,p_sy=0,0

	--direction
	p_dx,p_dy=0,0
	--animation variable
	p_flip=false	
	p_spr=2
end

function draw_buildings()
	for i=1,#buildings do
		spr(buildings[i].spr,
		buildings[i].sx-p_sx+60,
		buildings[i].sy-p_sy+60,
		1,1,false,false)
	end
end

function draw_player()
	if not p_flip then
		if(p_dx<0)p_flip=true
	else
		if(p_dx>0)p_flip=false
	end
 	--draw player
  	spr(p_spr,p_x,p_y,1,1,p_flip)
end

function update_buildings()
	for i=1,#buildings do
		--the buildings simulated x and y should stay relative to the player
		local b=buildings[i]
		
		--update building position
		-- b.sx+=p_dx*-1
		-- b.sy+=p_dy*-1
	end
end

function despawn_buildings()
	--delete buildings that are too far away
	for i=1,#buildings do
		local b=buildings[i]
		if (b == nil) return
		if (abs(b.sx-p_sx)>despawn_distance) or (abs(b.sy-p_sy)>despawn_distance) then
			--remove building
			deli(buildings,i)
		end
	end
end

function spawn_buildings()
	--spawn new buildings if the building count if below 10
	if #buildings<3 then
		-- get a random position at least 50 tiles away from the player
		local x,y=rnd(5)+50,rnd(5)+50
		--randomly flip the x and y
		if rnd(1)>0.5 then x*=-1 end
		if rnd(1)>0.5 then y*=-1 end
		--spawn a building
		add(buildings,{spr=4,sx=flr(x),sy=flr(y)})
	end
	
end

function update_player()
	p_dx,p_dy=0,0
	if btn(⬅️) then
		p_dx=-1
	end
	if btn(➡️) then
		p_dx=1
	end
 	if btn(⬆️) then
		p_dy=-1
	end
 	if btn(⬇️) then
		p_dy=1
	end
	--update player position
	p_sx+=p_dx
	p_sy+=p_dy
end
__gfx__
00000000000000000000099000000000555555501111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000a9899000000005a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000000000000a99777000c80005a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000000000000999999066c8660555555501111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000a999900067777605a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000000066009999099677777765a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000056669995990065577556555555501111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000555550999599065566556554445501144411000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
