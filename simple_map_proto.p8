pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
--this is a prototype to test spawning buildings
--and scrolling the map
--it should be noted that the map is not actually
--scrolling, but rather the player and buildings
--are moving relative to the map
--this prototype should spawn buildings as the player moves to new areas
--and despawn buildings as the player moves away from them (~100 tiles away)
function _init()
	init_player()

	--buildings array
	buildings={
		{spr=4,x=-30,y=-30},
		{spr=5,x=30,y=30},
	}
	--building variables
	despawn_distance=300
	
	--map functions
	map_x,map_y=0,0
end

function _update()
	update_player()
	-- despawn_buildings()
	-- spawn_buildings()
end

function _draw()
	cls(3)
	draw_camera()
	-- draw_terrain()

	--THIS WORKS!
	local map_offset_x = 128 - (cx % 128)
	local map_offset_y = 128 - (cy % 128)

	-- Render the map based on the camera's position
	for i = -1, 1 do
		for j = -1, 1 do
			map(0, 0,
				map_offset_x + 128 * i + cx,
				map_offset_y + 128 * j + cy)
		end
	end

	-- This works but everything is backwards
	-- local map_offset_x = cx % 128
	-- local map_offset_y = cy % 128
	-- for i = 0, 2 do
	-- 	for j = 0, 2 do
	-- 		map(0, 0,
	-- 			map_offset_x + 128 * i-128+cx,
	-- 			map_offset_y + 128 * j-128+cy)
	-- 	end
	-- end

	--this is close to working
	-- for i=0,2 do
	-- 	for j=0,2 do
	-- 		map(0,0,
	-- 		p_x%128+128*i-128-cx,
	-- 		p_y%128+128*j-128-cy,
	-- 		16,16)
	-- 	end
	-- end
	draw_buildings()
	draw_player()
	--debug
	if (true) then
		print('cx '..cx, cx+10, cy+10)
		print('cy '..cy, cx+10, cy+16)
		print('p_x '..p_x, cx+10, cy+22)
		print('p_y '..p_y, cx+10, cy+28)
	end
end

function draw_camera()
	cx=p_x-60
	cy=p_y-60
	camera(cx, cy)
end

function init_player()
	--player variables
	p_x,p_y=0,0

	--direction
	p_dx,p_dy=0,0
	--animation variable
	p_flip=false	
	p_spr=2
end

function draw_buildings()
	for i=1,#buildings do
		spr(buildings[i].spr,
		buildings[i].x,
		buildings[i].y,
		1,1,false,false)
	end
end

function draw_player()
	if not p_flip then
		if(p_dx<0)p_flip=true
	else
		if(p_dx>0)p_flip=false
	end
 	--draw player
  	spr(p_spr,p_x,p_y,1,1,p_flip)
end

function despawn_buildings()
	--delete buildings that are too far away
	-- for i=1,#buildings do
	-- 	local b=buildings[i]
	-- 	if (b == nil) return
	-- 	if (abs(b.sx-p_sx)>despawn_distance) or (abs(b.sy-p_sy)>despawn_distance) then
	-- 		--remove building
	-- 		deli(buildings,i)
	-- 	end
	-- end
end

function spawn_buildings()
	--spawn new buildings if the building count if below 10
	if #buildings<3 then
		-- get a random position at least 50 tiles away from the player
		local x,y=rnd(5)+50,rnd(5)+50
		--randomly flip the x and y
		if rnd(1)>0.5 then x*=-1 end
		if rnd(1)>0.5 then y*=-1 end
		--spawn a building
		add(buildings,{spr=4,sx=flr(x),sy=flr(y)})
	end
	
end

function draw_terrain()
	--draw a scrolling map
	--map is 128x128 pixels
	--map is 16x16 tiles
	--each tile is 8x8 pixels

	--get the tile position of the player
	local tx,ty=flr(p_x/8),flr(p_y/8)
	--get the tile position of the camera
	local cx,cy=flr(cx/8),flr(cy/8)
	--get the difference between the player and camera
	local dx,dy=tx-cx,ty-cy
	--get the difference between the player and camera in pixels
	local px,py=dx*8,dy*8
	--draw the map
	map(map_x-px,map_y-py,0,0,16,16)
end

function update_player()
	p_dx,p_dy=0,0
	if btn(⬅️) then
		p_dx=-1
	end
	if btn(➡️) then
		p_dx=1
	end
 	if btn(⬆️) then
		p_dy=-1
	end
 	if btn(⬇️) then
		p_dy=1
	end
	--update player position
	p_x+=p_dx
	p_y+=p_dy
end
__gfx__
00000000000000000000099000000000555555501111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000a9899000000005a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000000000000a99777000c80005a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000000000000999999066c8660555555501111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000a999900067777605a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000000066009999099677777765a5a5a501a1a1a1000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000056669995990065577556555555501111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000555550999599065566556554445501144411000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
